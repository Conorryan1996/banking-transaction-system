version: '3.8'

services:
  # PostgreSQL for Account Service
  postgres-accounts:
    image: postgres:15-alpine
    container_name: postgres-accounts
    environment:
      POSTGRES_DB: accounts_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_accounts_data:/var/lib/postgresql/data
    networks:
      - banking-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d accounts_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL for Customer Service
  postgres-customers:
    image: postgres:15-alpine
    container_name: postgres-customers
    environment:
      POSTGRES_DB: customers_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_customers_data:/var/lib/postgresql/data
    networks:
      - banking-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d customers_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Account Service
  account-service:
    build:
      context: .
      dockerfile: account-service/Dockerfile
    container_name: account-service
    ports:
      - "5000:5000"  # HTTP API
      - "9000:9000"  # gRPC
    depends_on:
      postgres-accounts:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-accounts:5432/accounts_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - GRPC_SERVER_PORT=9000
    networks:
      - banking-network
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/accounts" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Customer Service
  customer-service:
    build:
      context: .
      dockerfile: customer-service/Dockerfile
    container_name: customer-service
    ports:
      - "5001:5001"  # HTTP API
      - "9001:9001"  # gRPC
    depends_on:
      postgres-customers:
        condition: service_healthy
      account-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-customers:5432/customers_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - GRPC_SERVER_PORT=9001
      - GRPC_CLIENT_ACCOUNT_SERVICE_ADDRESS=static://account-service:9000
      - GRPC_CLIENT_ACCOUNT_SERVICE_NEGOTIATION_TYPE=plaintext
    networks:
      - banking-network
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5001/customers" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_accounts_data:
  postgres_customers_data:

networks:
  banking-network:
    driver: bridge